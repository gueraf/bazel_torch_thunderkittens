version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@2.0.0

jobs:
  setup:
    docker:
      - image: gueraf/cuda_bazel:latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_ACCESS_TOKEN
    steps:
      - checkout
      - run:
          name: "Generate config"
          command: |
            # Get all test targets (Python, C++, and CUDA), excluding requirements_test
            # Get Python test targets
            PY_TEST_TARGETS=$(bazelisk query 'kind("py_test", //...)')

            # Get C++ test targets (excluding CUDA tests)
            ALL_CC_TESTS=$(bazelisk query 'kind("cc_test", //...)')
            CC_TEST_TARGETS=""
            for test in $ALL_CC_TESTS; do
              # Check if this test has .cu source files - if so, it's a CUDA test, exclude it
              if ! bazelisk query "attr('srcs', '.*\.cu$', $test)" 2>/dev/null | grep -q "$test"; then
                CC_TEST_TARGETS="$CC_TEST_TARGETS $test"
              fi
            done

            # Get CUDA test targets (cuda_test rules show up as cc_test in queries)
            # TODO: CUDA tests temporarily disabled
            # ALL_CC_TESTS=$(bazelisk query 'kind("cc_test", //...)')
            CUDA_TEST_TARGETS=""
            # for test in $ALL_CC_TESTS; do
            #   # Check if this test has .cu source files by checking the actual files
            #   if bazelisk query "attr('srcs', '.*\.cu$', $test)" 2>/dev/null | grep -q "$test"; then
            #     CUDA_TEST_TARGETS="$CUDA_TEST_TARGETS $test"
            #   fi
            # done

            # Combine all test targets and filter out requirements_test
            TEST_TARGETS=$(echo "$PY_TEST_TARGETS $CC_TEST_TARGETS $CUDA_TEST_TARGETS" | tr ' ' '\n' | grep -vE ":requirements_test")

            # Start generating the new config
            echo "version: 2.1" > generated_config.yml
            echo "" >> generated_config.yml
            echo "jobs:" >> generated_config.yml

            # Add a job for each test target
            for target in $TEST_TARGETS; do
              # Create a sanitized job name from the target
              job_name=$(echo "$target" | tr '/:' '__' | tr -d '()' | sed 's/^_//g')
              
              # Ensure job name starts with a letter (CircleCI requirement)
              if [[ ! $job_name =~ ^[A-Za-z] ]]; then
                job_name="job-${job_name}"
              fi
              
              echo "  ${job_name}:" >> generated_config.yml
              echo "    docker:" >> generated_config.yml
              echo "      - image: cimg/node:current" >> generated_config.yml
              echo "    steps:" >> generated_config.yml
              echo "      - checkout" >> generated_config.yml
              echo "      - run:" >> generated_config.yml
              echo "          name: \"Install Bazelisk\"" >> generated_config.yml
              echo "          command: \"sudo npm install -g @bazel/bazelisk\"" >> generated_config.yml
              echo "      - run:" >> generated_config.yml
              echo "          name: \"Run Bazel test: ${target}\"" >> generated_config.yml
              echo "          command: \"bazelisk test --build_tests_only ${target}\"" >> generated_config.yml
            done

            # Add workflow configuration
            echo "" >> generated_config.yml
            echo "workflows:" >> generated_config.yml
            echo "  test-workflow:" >> generated_config.yml
            echo "    jobs:" >> generated_config.yml

            # Add all jobs to workflow
            for target in $TEST_TARGETS; do
              job_name=$(echo "$target" | tr '/:' '__' | tr -d '()' | sed 's/^_//g')
              
              # Ensure job name starts with a letter (CircleCI requirement)
              if [[ ! $job_name =~ ^[A-Za-z] ]]; then
                job_name="job-${job_name}"
              fi
              
              echo "      - ${job_name}" >> generated_config.yml
            done

            # Display the generated config for debugging
            cat generated_config.yml
      - continuation/continue:
          configuration_path: generated_config.yml

workflows:
  setup-workflow:
    jobs:
      - setup
